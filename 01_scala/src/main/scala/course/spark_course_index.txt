
达内课程笔记


1.基础知识
创建对象主要有3类
1、*Object 程序的入口main主函数，相当于单例类，相当于java中静态方法(object div -> public final class Div)
2、Class 定义对象/*case Class 内部已经序列化而且直接有toString/equals等方法
3、Trait 类似于java中的抽象类，类似实现多继承

>类名相同的对象叫做伴生对象，类和伴生对象之间可以相互访问私有的方法和属性。
> scala使用简单数据类型,在大数据场景中节省资源

https://www.yiibai.com/scala/scala_lists.html
Scala列表与数组非常相似，列表的所有元素都具有相同的类型，但有两个重要的区别。
首先，列表是不可变的，列表的元素不能通过赋值来更改。
其次，列表表示一个链表，而数组是平的。
Array是连续存储结构，所以初始化时必须设定初始值，List是不连续的存储结构，所以可以不初始化。

2.高阶函数
高阶函数（Higher-Order Function）就是操作其他函数的函数。
https://www.runoob.com/scala/scala-functions.html
函数/方法:函数可以作为一个参数传递,方法不行
scala高阶函数天然支持分布式运行



4.Thread
Future
scala.concurrent 包里的 Future[T] 是一个容器类型，代表一种返回值类型为 T 的计算。
计算可能会出错，也可能会超时；从而，当一个 future 完成时，它可能会包含异常，而不是你期望的那个值。
Future 只能写一次： 当一个 future 完成后，它就不能再被改变了。
同时，Future 只提供了读取计算值的接口，写入计算值的任务交给了 Promise，这样，API 层面上会有一个清晰的界限。

Promise
val f: Future[String] = future { "Hello World!" }
f: scala.concurrent.Future[String] = scala.concurrent.impl.Promise$DefaultPromise@2b509249

 得到的对象是一个 DefaultPromise ，它实现了 Future 和 Promise 接口

https://windor.gitbooks.io/beginners-guide-to-scala/content/chp8-welcome-to-the-future.html
------------------
    线程并发:
    1、Thread裸线程，完全由开发者创建和销毁，声明周期是由开发者来自己管理。它最靠近操作系统，它的执行效率最高。
        缺点：如果对线程把握能力差，写出的程序很可能存在并发问题。
    2、Executor提供线程池，可以设置固定线程数。例如最多开启10个线程。当需要线程时，直接系统从线程池中获取线程，来执行业务，如果在需要线程，依然去线程池中获取。如果线程达到峰值10个。可以继续申请，将其申请放入线程队列中。
        等待某个线程执行完并释放后，从队列中获取内容给这个线程。线程也不需要程序员去销毁，它会释放到线程池中。线程池都不需要开发者进行管理。
    3、ForkJoin框架。线程拆分，合并阻塞等待。无需自己写合并等待线程的判断，它会自动触发事件。只需要在事件中编程。
    4、Scala/Erlang=akka框架 akka天然的远程传输，基于actor模型，actor将远程的机器，core，抽取成一个虚拟单元，actor直接就需要通讯，传递消息.
        消息可以支持任何对象，非常强大，而且它的架构搜耦合，异步，承受更高的并发，分布式。提供压缩。actor百万数量

    线程并发解决方案
    1、Thread	小型工具类调用
    2、Executor线程池	一般业务中使用
    3、ForkJoin拆分合并框架	小的并发情况下
    4、Akka框架，消息机制MQ	分 布式高并发异步海量数据

 ------------------


5. actor
Actor实际就是一类用来通信的轻量级对象，每个Actor中维护自己的消息队列。
Actor之间的交互都是基于发送消息来完成，而不是采用阻塞的处理形式。
Actor是对并发写入以及分布式的高度抽象。
可以把Actor理解为一群人，他们都有自己的一个邮箱，这群人之间通过发送邮件消息来完成。将要执行的大任务的分解成足够小任务，派发给多个Actor来完成。
Actor比线程更轻量、在scala中可以创建数以百万计的Actor对象，奥秘在于Actor可以复用线程。基于事件机制，监听消息。

示例中使用代码/配置文件/两种方式远程通信
pom文件中只需要指定:akka-remote 依赖, 否则会抛出版本不一致异常

6.计数
监控控制台录入信息，将信息进行单词统计。
通过Trait类型的Conf来实现配置，通过Driver继承Conf，然后从系统获取键盘信息作为数据源。
Driver监听键盘，有信息就以akka调用，发送消息到MapperActor，Mapper接收到信息进行转换，然后将转换结果封装为MaperTask，发送akka消息到Reducer，
Reducer处理消息，最终封装为ReducerTask，最终控制台输出处理的消息。

>debug可以确认程序首先执行[receive]方法,从main方法中获取所需参数
























